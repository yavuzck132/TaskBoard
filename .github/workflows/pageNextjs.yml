# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect the package manager
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/taskboard/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/taskboard/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      # Print the detected package manager
      - name: Print detected package manager
        run: |
          echo "Detected package manager: ${{ steps.detect-package-manager.outputs.manager }}"
          echo "Install command: ${{ steps.detect-package-manager.outputs.command }}"
          echo "Runner command: ${{ steps.detect-package-manager.outputs.runner }}"
        
       # Setup Node.js without cache option
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Restore cache step (this caches node_modules based on the lock file)
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('taskboard/package-lock.json', 'taskboard/yarn.lock') }}-${{ hashFiles('taskboard/**/*.js', 'taskboard/**/*.jsx', 'taskboard/**/*.ts', 'taskboard/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('taskboard/package-lock.json', 'taskboard/yarn.lock') }}-

      # Configure Pages for Next.js
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      # Restore cache
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('taskboard/package-lock.json', 'taskboard/yarn.lock') }}-${{ hashFiles('taskboard/**/*.js', 'taskboard/**/*.jsx', 'taskboard/**/*.ts', 'taskboard/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('taskboard/package-lock.json', 'taskboard/yarn.lock') }}-

      # Install dependencies
      - name: Install dependencies
        run: |
          cd taskboard
          ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      # Build the Next.js project
      - name: Build with Next.js
        run: |
          cd taskboard
          ${{ steps.detect-package-manager.outputs.runner }} next build

      # Upload the built artifact for Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: taskboard/out  # Ensure this path matches your output folder

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
